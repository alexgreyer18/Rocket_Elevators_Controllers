OBJECTS TO CONTROL:
    Battery: Multiple elevator columns
    Column: Elevator shaft containing Elevator cages
    Cage: Elevator up or down
    CallButton: Up & Down buttons on each floors to call for Elevator
    FloorRequestButton: Buttons inside cage to chose destination 
    Doors: Elevator doors, timer open before closing 10s 
    OpenDoorButton: Button inside Elevator to keep door open
    CloseDoorButton: Button inside Elevator to close door ons
    Floor display: Battery command pannel 

SET lobbyLevel TO 1

SET basementColumn TO numberOfServicedFloors1
SET numberOfServicedFloors1 TO array OF numberOfFloors floors, lobbyLevel         '(-6 to -1) + lobbyLevel

SET Column1 TO numberOfServicedFloors2
SET numberOfServicedFloors2 TO array OF numberOfFloors floors, lobbyLevel         '(2 to 20) + lobbyLevel

SET Column2 TO numberOfServicedFloors3
SET numberOfServicedFloors3 TO array OF numberOfFloors floors, lobbyLevel         '(21 to 40) + lobbyLevel

SET Column3 TO numberOfServicedFloors4
SET numberOfServicedFloors4 TO array OF numberOfFloors floors, lobbyLevel         '(41 to 66) + lobbyLevel


'START OF PSEUDO CODE WITH MODERN APPROACH'

SEQUENCES:
    
SEQUENCE commandPanel WITH floor, direction
    CALL battery
    CALL operateElevator
END SEQUENCE

SEQUENCE checkTime WITH timeOfDay
SEQUENCE checkTime USING Elevator
    READ Weight FROM Elevator
    IF Weight GREATER THAN MaxWeight THEN
        RETURN TRUE
    ELSE RETURN FALSE
    END IF
END SEQUENCE

SEQUENCE battery
    CALL requestedFloorBtn
    CALL findColumn 
    CALL operateElevator
END SEQUENCE
    
SEQUENCE requestedFloorBtn WITH floor, direction
    IF requestedFloorBtn was PRESSED THEN
        PUSH floor AND direction to waitList
        SET floorLightBtn TO ON
    ELSE
        SET floorLightBtn TO OFF
END SEQUENCE

SEQUENCE findColumn WITH floor, direction RETURNING selectedColumn
    IF floorReq EQUAL OR LESSER THAN RC THEN
        RETURN basementColumn AS selectedColumn

    ELSE IF floorReq LESSER or EQUAL 20 AND GREATER OR EQUAL TO RC THEN
        RETURN Column1 AS selectedColumn

    ELSE IF floorReq LESSER or EQUAL 40 AND GREATER THAN 20 OR EQUAL TO RC THEN
        RETURN Column2 AS selectedColumn

    ELSE IF floorReq LESSER OR EQUAL 66 AND GREATER THAN 40 OR EQUAL TO RC THEN
        RETURN Column3 AS selectedColumn
    END IF

    CALL findElevator
END SEQUENCE

SEQUENCE findElevator WITH selectedColumn RETURNING selectedElevator

    INIT BestElevator TO NULL;
    INIT BestElevatorCase TO NULL; 
        
    IF selectedElevator IS NULL THEN
    
        FOR EACH Elevator in selectedColumnList

            OBTAIN currentElevatorFloor
            OBTAIN currentElevatorDirection
            OBTAIN currentElevatorState

            IF requestedFloor EQUAL currentElevatorFloor AND currentElevatorState EQUAL idle OR requestedFloor EQUAL currentElevatorFloor AND currentElevatorDirection EQUAL direction THEN 
                IF BestElevator IS NULL OR BestElevatorCase > 1
                    SET BestElevator as Elevator
                    SET BestElevatorCase as 1  
                
            ELSE IF requestedFloor EQUAL currentElevatorFloor AND currentElevatorState EQUAL idle THEN
                IF BestElevator IS NULL OR BestElevatorCase > 2
                    SET BestElevator as Elevator
                    SET BestElevatorCase as 2
                
            ELSE IF requestedFloor ABOVE OR BELOW currentElevatorFloor AND currentElevatorDirection EQUAL TO direction THEN 
                IF BestElevator IS NULL OR BestElevatorCase > 3
                    FOR EACH Elevator in ElevatorList
                        SET BestElevator as Elevator USING lowestIndexDifference
                        SET BestElevatorCase as 3
                    END FOR     

            ELSE IF requestedFloor ABOVE OR BELOW currentElevatorFloor AND currentElevatorDirection NOT EQUAL TO direction THEN 
                IF BestElevator IS NULL OR BestElevatorCase > 4
                    SET BestElevator as Elevator USING lowestIndexDifference
                    SET BestElevatorCase as 4                    
            END IF
                    
        END FOR

    RETURN BestElevator as selectedElevator
END SEQUENCE

SEQUENCE operateElevator WITH selectedElevator
    
    READ systemStatus FROM systemStatusCheck WITH Elevator
    IF systemStatus EQUAL is_safe THEN
        
        GET floor FROM sorted_waitList

        'execute if sorted_waitlist is not empty'
        IF sorted_waitList NOT EQUAL NULL THEN

            IF requestedFloor EQUAL currentElevatorFloor THEN
                CALL hasArrived
                POP requestedFloor FROM sorted_waitList
            
            ELSE IF requestedFloor GREATER THAN currentElevatorFloor THEN
                REPEAT
                    CALL goUp
                UNTIL currentElevatorFloor EQUAL requestedFloor
                CALL hasArrived
                POP requestedFloor FROM sorted_waitList
           

            ELSE IF requestedFloor LESSER THAN currentElevatorFloor THEN
                REPEAT
                    CALL goDown
                UNTIL currentElevatorFloor EQUAL requestedFloor
                CALL hasArrived
                POP requestedFloor FROM sorted_waitList
            END IF
        'execute if sorted_waitlist is empty'
        ELSE
            CALL setToIdle
        END IF
    END IF
END SEQUENCE

SEQUENCE setToIdle WITH selectedElevator
    SET currentElevatorState TO idle
    SET ElevatorList TO array of numberOfElevators Elevator
    FOR EACH Elevator IN ElevatorList
        IF currentElevatorState EQUAL idle
            REPEAT  
                goDown
            UNTIL currentElevatorFloor EQUAL lobbyLevel
    END FOR
END SEQUENCE

SEQUENCE hasArrived WITH selectedElevator
    SET floorLightBtn TO Off
    SET directionLight TO On
    CALL operateDoors USING selectedlElevator
END SEQUENCE

SEQUENCE lowestIndexDifference
    FOR EACH i in requestedFloor index
        FOR EACH j in currentElevatorFloor index
            SET lowestIndexDifference TO ABSOLUTE i MINUS j
        END FOR
    END FOR
END SEQUENCE

SEQUENCE waitList RETURNING sorted_waitList
    GET list FROM waitList
    SORT requestedFloor WITH elevatorSortingAlgorithm RETURNING sorted_list
    INIT sorted_waitList AS EQUAL sorted_list
END SEQUENCE

SEQUENCE operateDoors WITH selectedElevator
    CALL systemStatusCheck
        WHILE Elevator is_safe NOT EQUAL TRUE
        REPEAT
            INCREMENT timer by 2
        UNTIL Elevator is_safe EQUAL TRUE

        IF timer GREATER than 0        
            SET doorsElevator TO OPEN
        ELSE 
            SET doorsElevator TO CLOSED         
        END IF
END SEQUENCE

SEQUENCE goDown WITH selectedElevator
    FOR EACH numberOfFloor IN floors 
        WHILE numberOfFloor index GREATER THAN requestedFloor index
            DECREASE numberOfFloor by 1
    END FOR
END SEQUENCE

SEQUENCE goUp WITH selectedElevator
    FOR EACH numberOfFloor IN floors 
        WHILE numberOfFloor index LESSER THAN requestedFloor index
            INCREMENT numberOfFloor by 1
    END FOR
END SEQUENCE

SEQUENCE systemStatusCheck USING selectedElevator
    CALL overWeight
    CALL obstructed

    IF overWeight EQUAL FALSE AND obstructed EQUAL FALSE THEN
        SET is_safe TO TRUE
    ELSE
        SET is_safe TO FALSE
        REPEAT 
            CALL systemStatusCheck
        UNTIL is_safe EQUAL TRUE
        RETURN is_safe
    END IF
END SEQUENCE

SEQUENCE obstructed USING Elevator
    READ captor FROM Doors
    IF obstructed THEN
        RETURN TRUE
    ELSE 
        RETURN FALSE
    END IF
END SEQUENCE

SEQUENCE overWeight USING Elevator
    READ Weight FROM Elevator
    IF Weight GREATER THAN MaxWeight THEN
        RETURN TRUE
    ELSE RETURN FALSE
    END IF
END SEQUENCE