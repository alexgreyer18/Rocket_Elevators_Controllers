'PROJECT EXPLANATION AND DECLARATIONS'

This program will control a residential elevator system

OBJECTS TO CONTROL:
    Column: Elevator shaft containing Elevator cages
    Cage: Elevator up or down
    CallButton: Up & Down buttons on each floors to call for Elevator
    FloorRequestButton: Buttons inside cage to chose destination 
    Doors: Elevator doors, timer open before closing 10s 
    OpenDoorButton: Button inside Elevator to keep door open
    CloseDoorButton: Button inside Elevator to close door 

SET lobbyLevel TO 0
SET selectedElevator TO " "
SET waitList TO array OF " "
SET ElevatorList TO array OF numberOfElevators Elevator
SET floors TO array OF numberOfFloors floor


'START OF PSEUDO CODE'

'Main sequence'
SEQUENCE requestElevator WITH floor, direction
    CALL requestedFloorBtn USING floor, direction
    CALL findElevator USING floor, direction RETURNING selectedElevator
    CALL operateElevator USING selectedElevator
END SEQUENCE


'All other sequences the Main sequence makes use of'
SEQUENCE requestedFloorBtn WITH floor, direction
    IF requestedFloorBtn was PRESSED THEN
        PUSH floor AND direction TO waitList
        SET floorLightBtn TO ON
    ELSE
        SET floorLightBtn TO OFF
END SEQUENCE

SEQUENCE findElevator WITH floor, direction RETURNING selectedElevator

    INIT BestElevator TO NULL;
    INIT BestElevatorCase TO NULL; 
    
    IF selectedElevator IS NULL THEN
    
        FOR EACH Elevator in ElevatorList
            OBTAIN currentElevatorFloor
            OBTAIN currentElevatorDirection
            OBTAIN currentElevatorState

            IF requestedFloor EQUAL currentElevatorFloor AND currentElevatorState EQUAL idle OR requestedFloor EQUAL currentElevatorFloor AND currentElevatorDirection EQUAL direction THEN 
                IF BestElevator IS NULL OR BestElevatorCase > 1
                    SET Elevator TO BestElevator 
                    SET BestElevatorCase as 1  
                END IF 

            ELSE IF requestedFloor ABOVE OR BELOW currentElevatorFloor AND currentElevatorDirection EQUAL TO direction THEN 
                IF BestElevator IS NULL OR BestElevatorCase > 2
                    FOR EACH Elevator in ElevatorList
                        COMPUTE indexDifference RETURNING BestElevator
                        SET BestElevatorCase as 2
                    END FOR
                END IF

            ELSE IF requestedFloor ABOVE OR BELOW currentElevatorFloor AND currentElevatorDirection NOT EQUAL TO direction THEN 
                IF BestElevator IS NULL OR BestElevatorCase > 3
                    FOR EACH Elevator in ElevatorList
                        COMPUTE indexDifference RETURNING BestElevator
                        SET BestElevatorCase as 3
                    END FOR
                END IF
            END IF
        END FOR
    END IF
    SET BestElevator TO selectedElevator 
    RETURN selectedElevator 
END SEQUENCE

SEQUENCE operateElevator WITH selectedElevator
    
    READ systemStatus FROM checkSystemStatus USING selectedElevator
    IF systemStatus EQUAL is_safe THEN
        
        GET floor FROM sorted_waitList

        'execute if sorted_waitlist is not empty'
        IF sorted_waitList NOT EQUAL NULL THEN

            IF requestedFloor EQUAL currentElevatorFloor THEN
                CALL hasArrived USING selectedElevator
                POP requestedFloor FROM sorted_waitList
            
            ELSE IF requestedFloor GREATER THAN currentElevatorFloor THEN
                REPEAT
                    CALL goUp USING selectedElevator
                UNTIL currentElevatorFloor EQUAL requestedFloor
                CALL hasArrived USING selectedElevator
                POP requestedFloor FROM sorted_waitList

            ELSE IF requestedFloor LESSER THAN currentElevatorFloor THEN
                REPEAT
                    CALL goDown USING selectedElevator
                UNTIL currentElevatorFloor EQUAL requestedFloor
                CALL hasArrived USING selectedElevator
                POP requestedFloor FROM sorted_waitList
            END IF
        'execute if sorted_waitlist is empty'
        ELSE
            CALL setToIdle USING selectedElevator
        END IF
    END IF
END SEQUENCE

SEQUENCE setToIdle WITH selectedElevator
    SET currentElevatorState TO idle
    CALL checkTimeOfDay USING ElevatorList
        FOR EACH Elevator IN ElevatorList
            IF currentElevatorState EQUAL idle
                REPEAT  
                    CALL goDown USING selectedElevator
                UNTIL currentElevatorFloor EQUAL lobbyLevel
        END FOR
END SEQUENCE

SEQUENCE indexDifference WITH ElevatorList
    FOR EACH Elevator IN ElevatorList
        SET indexDifference TO array OF ABSOLUTE requestedFloor MINUS currentElevatorFloor
    END FOR
    IF indexDifference EQUAL lowestIndex
        SET Elevator TO BestElevator 
    END IF
    RETURN BestElevator
END SEQUENCE

SEQUENCE insideBtn WITH floor, selectedElevator
    IF insideBtn was PRESSED THEN
        PUSH floor AND direction to waitList
        SET insideBtn TO ON
    ELSE
    SET insideBtn TO OFF
END SEQUENCE

SEQUENCE waitList RETURNING sorted_waitList
    GET requestedFloors FROM waitList
    SORT waitList WITH elevatorSortingAlgorithm
    SET waitList TO sorted_list
    RETURN sorted_waitList
END SEQUENCE

SEQUENCE hasArrived WITH selectedElevator
    SET floorLightBtn TO Off
    SET directionLight TO On
    CALL operateDoors USING selectedElevator
END SEQUENCE

SEQUENCE operateDoors WITH selectedElevator
    CALL checkSystemStatus USING selectedElevator
        WHILE selectedElevator is_safe NOT EQUAL TRUE
        REPEAT
            INCREMENT timer by 2
        UNTIL selectedElevator is_safe EQUAL TRUE

        IF timer GREATER than 0        
            SET doorsElevator TO OPEN
        ELSE 
            SET doorsElevator TO CLOSED         
        END IF
END SEQUENCE

SEQUENCE goDown WITH selectedElevator
    FOR EACH numberOfFloor IN floors 
        WHILE numberOfFloor index GREATER THAN requestedFloor index
            DECREASE numberOfFloor by 1
    END FOR
END SEQUENCE

SEQUENCE goUp WITH selectedElevator
    FOR EACH numberOfFloor IN floors 
        WHILE numberOfFloor index LESSER THAN requestedFloor index
            INCREMENT numberOfFloor by 1
    END FOR
END SEQUENCE

SEQUENCE checkSystemStatus WITH selectedElevator
    CALL overWeight
    CALL obstructed
    FOR EACH Elevator IN ElevatorList
        IF overWeight EQUAL FALSE AND obstructed EQUAL FALSE THEN
            SET is_safe TO TRUE
        ELSE
            SET is_safe TO FALSE
            REPEAT 
                CALL checkSystemStatus USING selectedElevator
            UNTIL is_safe EQUAL TRUE
            RETURN is_safe
        END IF
    END FOR
END SEQUENCE

SEQUENCE is_obstructed WITH selectedElevator
    READ captor FROM doorsElevator
    IF obstructed THEN
        RETURN TRUE
    ELSE 
        RETURN FALSE
    END IF
END SEQUENCE

SEQUENCE is_overWeight WITH selectedElevator
    READ Weight FROM Elevator
    IF Weight GREATER THAN MaxWeight THEN
        RETURN TRUE
    ELSE RETURN FALSE
    END IF
END SEQUENCE
